<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
							http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
							http://www.springframework.org/schema/aop 
							http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context-3.2.xsd 
							http://www.springframework.org/schema/tx 
							http://www.springframework.org/schema/tx/spring-tx.xsd ">
						
	<!-- 配置文件读入 ,多个用逗号隔开 -->
	<context:property-placeholder location="classpath:common/jdbc.properties" ignore-unresolvable="true"/>
		
	<!-- dataSource 配置 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"
		p:targetDataSource-ref="dynamicDataSource" />
		
	<!-- dataSource 多数据源支持 -->
	<bean id="dynamicDataSource" class="com.base.support.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource" value-ref="dataSourceJDBC" />
			</map>
		</property>
	</bean>
		
	<!-- mysql数据源 -->
	<bean id="dataSourceJDBC" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.drivername}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<!-- initialSize初始化连接数目 --> 
		<property name="initialSize" value="10" />
		<!-- maxActive连接池支持的最大连接数 --> 
	  	<property name="maxActive" value="100" /> 
	  	<!-- maxIdle连接池中最多可空闲maxIdle个连接 -->
	  	<property name="maxIdle" value="30" /> 
	  	<!-- minIdle连接池中最少空闲minIdle个连接 -->
	  	<property name="minIdle" value="10" /> 
	  	<!-- logAbandoned连接池收回空闲的活动连接时是否打印消息 -->
	  	<property name="logAbandoned" value="true" /> 
	  	<!-- 每timeBetweenEvictionRunsMillis毫秒检查一次连接池中空闲的连接 -->
	  	<property name="timeBetweenEvictionRunsMillis" value="20000"></property>
	  	<!-- 把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开 -->
	  	<property name="minEvictableIdleTimeMillis" value="28700"></property>
	  	<!-- removeAbandoned是否清理 -->
	  	<property name="removeAbandoned" value="true" /> 
	  	<!-- removeAbandonedTimeout针对未被close的活动连接 -->
	 	<property name="removeAbandonedTimeout" value="1000" /> 
	 	<!-- maxWait连接池中连接用完时，新的请求等待时间，毫秒 -->
	  	<property name="maxWait" value="5000" /> 		
	</bean>
	
    <!-- Mybatis 配置 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" /> 
        <property name="configLocation" value="classpath:spring/ibatisConfig.xml" /> 
        <property name="mapperLocations" value="classpath*:com/**/**/mapper/*.xml" /> 
    </bean>  
    <!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao,com.*.daoEx" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> 
    
    <!-- spring jdbc -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
		lazy-init="true" />

	<!-- 配置事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<aop:aspectj-autoproxy />
	
	<aop:config>
		<aop:advisor pointcut="execution(* com.base..*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<aop:config>
		<aop:advisor pointcut="execution(* com.item..*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	
	<aop:config>
		<aop:advisor pointcut="execution(* com..mobile.*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 定义国际化消息 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>
</beans>
	